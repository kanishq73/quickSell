{"ast":null,"code":"var _jsxFileName = \"/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// // Priority labels mapping\n// const priorityLabels = {\n//   \"1\": \"Urgent\",\n//   \"2\": \"High\",\n//   \"3\": \"Medium\",\n//   \"4\": \"Low\",\n//   \"5\": \"No priority\",\n// };\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState(\"priority\");\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets from an API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets = groupBy(tickets, grouping);\n\n//     // Apply the priority labels if grouping by priority\n//     if (grouping === \"priority\") {\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: priorityLabels[group.title] || \"No priority\",\n//       }));\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//        <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column key={group.title} title={group.title} tickets={group.tickets} \n//           count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\";\nimport Column from \"./Column\";\nimport \"./Board.css\";\nimport TopBar from './Topbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  useEffect(() => {\n    const getTicketsAndUsers = async () => {\n      try {\n        const data = await fetchTickets();\n        if (data) {\n          setTickets(data.tickets);\n          setUsers(data.users);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    getTicketsAndUsers();\n  }, []);\n  const groupByPriority = tickets => {\n    const priorityLabels = {\n      \"1\": \"Urgent\",\n      \"2\": \"High\",\n      \"3\": \"Medium\",\n      \"4\": \"Low\",\n      \"5\": \"No priority\"\n    };\n    const grouped = tickets.reduce((acc, curr) => {\n      const groupKey = curr.priority || \"5\"; // Default to \"No priority\"\n      if (!acc[groupKey]) {\n        acc[groupKey] = [];\n      }\n      acc[groupKey].push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map(key => ({\n      title: priorityLabels[key] || \"No priority\",\n      tickets: grouped[key]\n    }));\n  };\n  const groupByUsername = (tickets, users) => {\n    const getUserName = userId => {\n      const user = users.find(user => user.id === userId);\n      return user ? user.name : \"Unknown User\";\n    };\n    const grouped = tickets.reduce((acc, curr) => {\n      const groupKey = getUserName(curr.userId);\n      if (!acc[groupKey]) {\n        acc[groupKey] = [];\n      }\n      acc[groupKey].push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map(key => ({\n      title: key,\n      tickets: grouped[key]\n    }));\n  };\n  const groupTickets = () => {\n    if (tickets.length === 0) {\n      return []; // Return an empty array if there are no tickets\n    }\n    if (grouping === \"priority\") {\n      return groupByPriority(tickets);\n    } else if (grouping === \"username\") {\n      return groupByUsername(tickets, users);\n    }\n    return []; // Default case, return empty array if grouping is invalid\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      setGrouping: setGrouping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: groupTickets().map(group => /*#__PURE__*/_jsxDEV(Column, {\n        title: group.title,\n        tickets: group.tickets,\n        count: group.tickets.length\n      }, group.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"wUy2qmDH/qkl4kXEyUIl6eLOl9g=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","fetchTickets","Column","TopBar","jsxDEV","_jsxDEV","Board","_s","tickets","setTickets","users","setUsers","grouping","setGrouping","getTicketsAndUsers","data","error","console","groupByPriority","priorityLabels","grouped","reduce","acc","curr","groupKey","priority","push","Object","keys","map","key","title","groupByUsername","getUserName","userId","user","find","id","name","groupTickets","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","group","count","_c","$RefreshReg$"],"sources":["/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// // Priority labels mapping\n// const priorityLabels = {\n//   \"1\": \"Urgent\",\n//   \"2\": \"High\",\n//   \"3\": \"Medium\",\n//   \"4\": \"Low\",\n//   \"5\": \"No priority\",\n// };\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState(\"priority\");\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets from an API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets = groupBy(tickets, grouping);\n\n//     // Apply the priority labels if grouping by priority\n//     if (grouping === \"priority\") {\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: priorityLabels[group.title] || \"No priority\",\n//       }));\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//        <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column key={group.title} title={group.title} tickets={group.tickets} \n//           count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\";\nimport Column from \"./Column\";\nimport \"./Board.css\";\nimport TopBar from './Topbar';\n\nconst Board = () => {\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n\n  useEffect(() => {\n    const getTicketsAndUsers = async () => {\n      try {\n        const data = await fetchTickets();\n        if (data) {\n          setTickets(data.tickets);\n          setUsers(data.users);\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n      }\n    };\n    getTicketsAndUsers();\n  }, []);\n\n  const groupByPriority = (tickets) => {\n    const priorityLabels = {\n      \"1\": \"Urgent\",\n      \"2\": \"High\",\n      \"3\": \"Medium\",\n      \"4\": \"Low\",\n      \"5\": \"No priority\",\n    };\n\n    const grouped = tickets.reduce((acc, curr) => {\n      const groupKey = curr.priority || \"5\"; // Default to \"No priority\"\n      if (!acc[groupKey]) {\n        acc[groupKey] = [];\n      }\n      acc[groupKey].push(curr);\n      return acc;\n    }, {});\n\n    return Object.keys(grouped).map((key) => ({\n      title: priorityLabels[key] || \"No priority\",\n      tickets: grouped[key],\n    }));\n  };\n\n  const groupByUsername = (tickets, users) => {\n    const getUserName = (userId) => {\n      const user = users.find((user) => user.id === userId);\n      return user ? user.name : \"Unknown User\";\n    };\n\n    const grouped = tickets.reduce((acc, curr) => {\n      const groupKey = getUserName(curr.userId);\n      if (!acc[groupKey]) {\n        acc[groupKey] = [];\n      }\n      acc[groupKey].push(curr);\n      return acc;\n    }, {});\n\n    return Object.keys(grouped).map((key) => ({\n      title: key,\n      tickets: grouped[key],\n    }));\n  };\n\n  const groupTickets = () => {\n    if (tickets.length === 0) {\n      return []; // Return an empty array if there are no tickets\n    }\n\n    if (grouping === \"priority\") {\n      return groupByPriority(tickets);\n    } else if (grouping === \"username\") {\n      return groupByUsername(tickets, users);\n    }\n\n    return []; // Default case, return empty array if grouping is invalid\n  };\n\n  return (\n    <div className=\"board-container\">\n      <TopBar setGrouping={setGrouping} />\n      <div className=\"kanban-board\">\n        {groupTickets().map((group) => (\n          <Column\n            key={group.title}\n            title={group.title}\n            tickets={group.tickets}\n            count={group.tickets.length}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}