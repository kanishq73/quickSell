{"ast":null,"code":"var _jsxFileName = \"/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// // Priority labels mapping\n// const priorityLabels = {\n//   \"1\": \"Urgent\",\n//   \"2\": \"High\",\n//   \"3\": \"Medium\",\n//   \"4\": \"Low\",\n//   \"5\": \"No priority\",\n// };\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState(\"priority\");\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets from an API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets = groupBy(tickets, grouping);\n\n//     // Apply the priority labels if grouping by priority\n//     if (grouping === \"priority\") {\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: priorityLabels[group.title] || \"No priority\",\n//       }));\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//        <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column key={group.title} title={group.title} tickets={group.tickets} \n//           count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\nconst Board = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n  const users = {\n    \"usr-1\": \"Anoop Sharma\",\n    \"usr-2\": \"Yogesh\",\n    \"usr-3\": \"Shankar Kumar\",\n    \"usr-4\": \"Ramesh\",\n    \"usr-5\": \"Suresh\"\n  };\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority or userId)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map(key => ({\n      title: key,\n      tickets: grouped[key]\n    }));\n  };\n  const groupTickets = () => {\n    let groupedTickets = [];\n    if (grouping === \"userId\") {\n      // Group by userId and map to username\n      groupedTickets = groupBy(tickets, \"userId\").map(group => ({\n        ...group,\n        title: users[group.title] || \"Unknown User\"\n      }));\n    } else {\n      // Group by priority or any other field\n      groupedTickets = groupBy(tickets, grouping);\n\n      // Apply the priority labels if grouping by priority\n      if (grouping === \"priority\") {\n        groupedTickets = groupedTickets.map(group => ({\n          ...group,\n          title: priorityLabels[group.title] || \"No priority\"\n        }));\n      }\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach(group => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n    return groupedTickets;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      setGrouping: setGrouping,\n      setSorting: setSorting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: groupTickets().map(group => /*#__PURE__*/_jsxDEV(Column, {\n        title: group.title,\n        tickets: group.tickets,\n        count: group.tickets.length\n      }, group.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"vIIRgOZ4Eq78NgJpSfuZ/Kbynis=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["Board","_s","tickets","setTickets","useState","grouping","setGrouping","sorting","setSorting","users","useEffect","getTickets","data","fetchTickets","groupBy","arr","key","grouped","reduce","acc","curr","push","Object","keys","map","title","groupTickets","groupedTickets","group","priorityLabels","forEach","sort","a","b","priority","localeCompare","_jsxDEV","className","children","TopBar","fileName","_jsxFileName","lineNumber","columnNumber","Column","count","length","_c","$RefreshReg$"],"sources":["/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js"],"sourcesContent":["\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// // Priority labels mapping\n// const priorityLabels = {\n//   \"1\": \"Urgent\",\n//   \"2\": \"High\",\n//   \"3\": \"Medium\",\n//   \"4\": \"Low\",\n//   \"5\": \"No priority\",\n// };\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState(\"priority\");\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets from an API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets = groupBy(tickets, grouping);\n\n//     // Apply the priority labels if grouping by priority\n//     if (grouping === \"priority\") {\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: priorityLabels[group.title] || \"No priority\",\n//       }));\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//        <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column key={group.title} title={group.title} tickets={group.tickets} \n//           count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\n\n\n\nconst Board = () => {\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n\n  const users = {\n    \"usr-1\": \"Anoop Sharma\",\n    \"usr-2\": \"Yogesh\",\n    \"usr-3\": \"Shankar Kumar\",\n    \"usr-4\": \"Ramesh\",\n    \"usr-5\": \"Suresh\",\n  };\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority or userId)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map((key) => ({\n      title: key,\n      tickets: grouped[key],\n    }));\n  };\n\n  const groupTickets = () => {\n    let groupedTickets = [];\n\n    if (grouping === \"userId\") {\n      // Group by userId and map to username\n      groupedTickets = groupBy(tickets, \"userId\").map((group) => ({\n        ...group,\n        title: users[group.title] || \"Unknown User\",\n      }));\n    } else {\n      // Group by priority or any other field\n      groupedTickets = groupBy(tickets, grouping);\n\n      // Apply the priority labels if grouping by priority\n      if (grouping === \"priority\") {\n        groupedTickets = groupedTickets.map((group) => ({\n          ...group,\n          title: priorityLabels[group.title] || \"No priority\",\n        }));\n      }\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach((group) => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n\n    return groupedTickets;\n  };\n\n  return (\n    <div className=\"board-container\">\n      <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n      <div className=\"kanban-board\">\n        {groupTickets().map((group) => (\n          <Column key={group.title} title={group.title} tickets={group.tickets} count={group.tickets.length} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}