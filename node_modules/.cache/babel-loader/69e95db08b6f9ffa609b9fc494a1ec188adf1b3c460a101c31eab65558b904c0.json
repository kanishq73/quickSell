{"ast":null,"code":"var _jsxFileName = \"/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\nimport Column from \"./Column\"; // Import Column component\nimport \"./Board.css\"; // Import board-specific styles\n\nimport TopBar from './Topbar'; // Import the TopBar component\nimport './Board.css'; // For custom CSS\n\n// Priority labels mapping\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priorityLabels = {\n  \"1\": \"Urgent\",\n  \"2\": \"High\",\n  \"3\": \"Medium\",\n  \"4\": \"Low\",\n  \"5\": \"No priority\"\n};\nconst Board = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n  const [users, setUsers] = useState([]);\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map(key => ({\n      title: key,\n      tickets: grouped[key]\n    }));\n  };\n  const groupTickets = () => {\n    let groupedTickets = groupBy(tickets, grouping);\n\n    // Apply the priority labels if grouping by priority\n    if (grouping === \"user\") {\n      groupedTickets = groupBy(tickets, \"userId\");\n\n      // Replace userId with the actual username for display\n      groupedTickets = groupedTickets.map(group => ({\n        ...group,\n        title: findUsername(group.title)\n      }));\n    } else if (grouping === \"priority\") {\n      groupedTickets = groupedTickets.map(group => ({\n        ...group,\n        title: priorityLabels[group.title] || \"No priority\"\n      }));\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach(group => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n    return groupedTickets;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: [/*#__PURE__*/_jsxDEV(TopBar, {\n      setGrouping: setGrouping,\n      setSorting: setSorting\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: groupTickets().map(group => /*#__PURE__*/_jsxDEV(Column, {\n        title: group.title,\n        tickets: group.tickets,\n        count: group.tickets.length\n      }, group.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n// export default Board;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n// import TopBar from \"./Topbar\"; // Import the TopBar component\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [grouping, setGrouping] = useState(\"user\"); // Default grouping by user\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets and users from the API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//       setUsers(data.users); // Set the users data\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., userId or priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   // Find username by userId\n//   const findUsername = (userId) => {\n//     const user = users.find((user) => user.id === userId);\n//     return user ? user.name : \"Unknown User\";\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets;\n\n//     // Group by userId if grouping by user\n//     if (grouping === \"user\") {\n//       groupedTickets = groupBy(tickets, \"userId\");\n\n//       // Replace userId with the actual username for display\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: findUsername(group.title),\n//       }));\n//     } else {\n//       // Default behavior: grouping by priority or another field\n//       groupedTickets = groupBy(tickets, grouping);\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//       <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column\n//             key={group.title}\n//             title={group.title}\n//             tickets={group.tickets}\n//             count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n_s(Board, \"iTUAou9+0cT/ODELIDW/3gRyx6g=\");\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","fetchTickets","Column","TopBar","jsxDEV","_jsxDEV","priorityLabels","Board","_s","tickets","setTickets","grouping","setGrouping","sorting","setSorting","users","setUsers","getTickets","data","groupBy","arr","key","grouped","reduce","acc","curr","push","Object","keys","map","title","groupTickets","groupedTickets","group","findUsername","forEach","sort","a","b","priority","localeCompare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","count","length","_c","$RefreshReg$"],"sources":["/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js"],"sourcesContent":["\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\nimport Column from \"./Column\"; // Import Column component\nimport \"./Board.css\"; // Import board-specific styles\n\n\nimport TopBar from './Topbar'; // Import the TopBar component\nimport './Board.css'; // For custom CSS\n\n// Priority labels mapping\nconst priorityLabels = {\n  \"1\": \"Urgent\",\n  \"2\": \"High\",\n  \"3\": \"Medium\",\n  \"4\": \"Low\",\n  \"5\": \"No priority\",\n};\n\nconst Board = () => {\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n  const [users, setUsers] = useState([]);\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map((key) => ({\n      title: key,\n      tickets: grouped[key],\n    }));\n  };\n\n  const groupTickets = () => {\n    let groupedTickets = groupBy(tickets, grouping);\n\n    // Apply the priority labels if grouping by priority\n    if (grouping === \"user\") {\n      groupedTickets = groupBy(tickets, \"userId\");\n\n      // Replace userId with the actual username for display\n      groupedTickets = groupedTickets.map((group) => ({\n        ...group,\n        title: findUsername(group.title),\n      }));\n    }\n    else if (grouping === \"priority\") {\n      groupedTickets = groupedTickets.map((group) => ({\n        ...group,\n        title: priorityLabels[group.title] || \"No priority\",\n      }));\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach((group) => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n\n    return groupedTickets;\n  };\n\n  return (\n    <div className=\"board-container\">\n       <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n      <div className=\"kanban-board\">\n        {groupTickets().map((group) => (\n          <Column key={group.title} title={group.title} tickets={group.tickets} \n          count={group.tickets.length}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// export default Board;\n\n// import React, { useState, useEffect } from \"react\";\n// import { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\n// import Column from \"./Column\"; // Import Column component\n// import \"./Board.css\"; // Import board-specific styles\n// import TopBar from \"./Topbar\"; // Import the TopBar component\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [users, setUsers] = useState([]);\n//   const [grouping, setGrouping] = useState(\"user\"); // Default grouping by user\n//   const [sorting, setSorting] = useState(\"priority\");\n\n//   // Fetch tickets and users from the API\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets(); // Replace with actual API call\n//       setTickets(data.tickets);\n//       setUsers(data.users); // Set the users data\n//     };\n//     getTickets();\n//   }, []);\n\n//   // Group tickets by a specific key (e.g., userId or priority)\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n//     return Object.keys(grouped).map((key) => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   // Find username by userId\n//   const findUsername = (userId) => {\n//     const user = users.find((user) => user.id === userId);\n//     return user ? user.name : \"Unknown User\";\n//   };\n\n//   const groupTickets = () => {\n//     let groupedTickets;\n\n    \n\n    \n\n//     // Group by userId if grouping by user\n//     if (grouping === \"user\") {\n//       groupedTickets = groupBy(tickets, \"userId\");\n\n//       // Replace userId with the actual username for display\n//       groupedTickets = groupedTickets.map((group) => ({\n//         ...group,\n//         title: findUsername(group.title),\n//       }));\n//     } else {\n//       // Default behavior: grouping by priority or another field\n//       groupedTickets = groupBy(tickets, grouping);\n//     }\n\n//     // Sort tickets within each group\n//     groupedTickets.forEach((group) => {\n//       if (sorting === \"priority\") {\n//         group.tickets.sort((a, b) => b.priority - a.priority);\n//       } else {\n//         group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n//       }\n//     });\n\n//     return groupedTickets;\n//   };\n\n//   return (\n//     <div className=\"board-container\">\n//       <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <Column\n//             key={group.title}\n//             title={group.title}\n//             tickets={group.tickets}\n//             count={group.tickets.length}\n//           />\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}