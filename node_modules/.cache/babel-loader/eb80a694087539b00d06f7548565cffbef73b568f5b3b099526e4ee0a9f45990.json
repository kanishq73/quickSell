{"ast":null,"code":"var _jsxFileName = \"/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { fetchTickets } from '../Api';\n// import Card from './Card';\n// import DisplayOptions from './DisplayOptions';\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sorting, setSorting] = useState('priority');\n\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets();\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   useEffect(() => {\n//     const savedGrouping = localStorage.getItem('grouping');\n//     const savedSorting = localStorage.getItem('sorting');\n\n//     if (savedGrouping) setGrouping(savedGrouping);\n//     if (savedSorting) setSorting(savedSorting);\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem('grouping', grouping);\n//     localStorage.setItem('sorting', sorting);\n//   }, [grouping, sorting]);\n\n//   const groupTickets = () => {\n//     let groupedTickets = [];\n\n//     if (grouping === 'status') {\n//       groupedTickets = groupBy(tickets, 'status');\n//     } else if (grouping === 'user') {\n//       groupedTickets = groupBy(tickets, 'user');\n//     } else {\n//       groupedTickets = groupBy(tickets, 'priority');\n//     }\n\n//     if (sorting === 'priority') {\n//       groupedTickets.forEach(group => group.tickets.sort((a, b) => b.priority - a.priority));\n//     } else {\n//       groupedTickets.forEach(group => group.tickets.sort((a, b) => a.title.localeCompare(b.title)));\n//     }\n\n//     return groupedTickets;\n//   };\n\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n\n//     return Object.keys(grouped).map(key => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   return (\n//     <div className=\"board-container\" style={{ paddingTop: '70px' }}> {/* Adjust padding for top bar */}\n//       <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <div key={group.title} className=\"group-column\">\n//             <h3>{group.title}</h3>\n//             {group.tickets.map((ticket) => (\n//               <Card key={ticket.id} ticket={ticket} />\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\nimport Column from \"./Column\"; // Import Column component\nimport \"./Board.css\"; // Import board-specific styles\n\n// Priority labels mapping\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priorityLabels = {\n  \"1\": \"Urgent\",\n  \"2\": \"High\",\n  \"3\": \"Medium\",\n  \"4\": \"Low\",\n  \"5\": \"No priority\"\n};\nconst Board = () => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map(key => ({\n      title: key,\n      tickets: grouped[key]\n    }));\n  };\n  const groupTickets = () => {\n    let groupedTickets = groupBy(tickets, grouping);\n\n    // Apply the priority labels if grouping by priority\n    if (grouping === \"priority\") {\n      groupedTickets = groupedTickets.map(group => ({\n        ...group,\n        title: priorityLabels[group.title] || \"No priority\"\n      }));\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach(group => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n    return groupedTickets;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"kanban-board\",\n      children: groupTickets().map(group => /*#__PURE__*/_jsxDEV(Column, {\n        title: group.title,\n        tickets: group.tickets\n      }, group.title, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Board, \"vIIRgOZ4Eq78NgJpSfuZ/Kbynis=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","fetchTickets","Column","jsxDEV","_jsxDEV","priorityLabels","Board","_s","tickets","setTickets","grouping","setGrouping","sorting","setSorting","getTickets","data","groupBy","arr","key","grouped","reduce","acc","curr","push","Object","keys","map","title","groupTickets","groupedTickets","group","forEach","sort","a","b","priority","localeCompare","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kanishqmersa/Desktop/quicksell/kanban-board/src/components/Board.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { fetchTickets } from '../Api';\n// import Card from './Card';\n// import DisplayOptions from './DisplayOptions';\n// import TopBar from './Topbar'; // Import the TopBar component\n// import './Board.css'; // For custom CSS\n\n// const Board = () => {\n//   const [tickets, setTickets] = useState([]);\n//   const [grouping, setGrouping] = useState('status');\n//   const [sorting, setSorting] = useState('priority');\n\n//   useEffect(() => {\n//     const getTickets = async () => {\n//       const data = await fetchTickets();\n//       setTickets(data.tickets);\n//     };\n//     getTickets();\n//   }, []);\n\n//   useEffect(() => {\n//     const savedGrouping = localStorage.getItem('grouping');\n//     const savedSorting = localStorage.getItem('sorting');\n\n//     if (savedGrouping) setGrouping(savedGrouping);\n//     if (savedSorting) setSorting(savedSorting);\n//   }, []);\n\n//   useEffect(() => {\n//     localStorage.setItem('grouping', grouping);\n//     localStorage.setItem('sorting', sorting);\n//   }, [grouping, sorting]);\n\n//   const groupTickets = () => {\n//     let groupedTickets = [];\n    \n//     if (grouping === 'status') {\n//       groupedTickets = groupBy(tickets, 'status');\n//     } else if (grouping === 'user') {\n//       groupedTickets = groupBy(tickets, 'user');\n//     } else {\n//       groupedTickets = groupBy(tickets, 'priority');\n//     }\n  \n//     if (sorting === 'priority') {\n//       groupedTickets.forEach(group => group.tickets.sort((a, b) => b.priority - a.priority));\n//     } else {\n//       groupedTickets.forEach(group => group.tickets.sort((a, b) => a.title.localeCompare(b.title)));\n//     }\n  \n//     return groupedTickets;\n//   };\n\n//   const groupBy = (arr, key) => {\n//     const grouped = arr.reduce((acc, curr) => {\n//       (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n//       return acc;\n//     }, {});\n    \n//     return Object.keys(grouped).map(key => ({\n//       title: key,\n//       tickets: grouped[key],\n//     }));\n//   };\n\n//   return (\n//     <div className=\"board-container\" style={{ paddingTop: '70px' }}> {/* Adjust padding for top bar */}\n//       <TopBar setGrouping={setGrouping} setSorting={setSorting} />\n//       <div className=\"kanban-board\">\n//         {groupTickets().map((group) => (\n//           <div key={group.title} className=\"group-column\">\n//             <h3>{group.title}</h3>\n//             {group.tickets.map((ticket) => (\n//               <Card key={ticket.id} ticket={ticket} />\n//             ))}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Board;\n\nimport React, { useState, useEffect } from \"react\";\nimport { fetchTickets } from \"../Api\"; // Mock API call to fetch tickets\nimport Column from \"./Column\"; // Import Column component\nimport \"./Board.css\"; // Import board-specific styles\n\n// Priority labels mapping\nconst priorityLabels = {\n  \"1\": \"Urgent\",\n  \"2\": \"High\",\n  \"3\": \"Medium\",\n  \"4\": \"Low\",\n  \"5\": \"No priority\",\n};\n\nconst Board = () => {\n  const [tickets, setTickets] = useState([]);\n  const [grouping, setGrouping] = useState(\"priority\");\n  const [sorting, setSorting] = useState(\"priority\");\n\n  // Fetch tickets from an API\n  useEffect(() => {\n    const getTickets = async () => {\n      const data = await fetchTickets(); // Replace with actual API call\n      setTickets(data.tickets);\n    };\n    getTickets();\n  }, []);\n\n  // Group tickets by a specific key (e.g., priority)\n  const groupBy = (arr, key) => {\n    const grouped = arr.reduce((acc, curr) => {\n      (acc[curr[key]] = acc[curr[key]] || []).push(curr);\n      return acc;\n    }, {});\n    return Object.keys(grouped).map((key) => ({\n      title: key,\n      tickets: grouped[key],\n    }));\n  };\n\n  const groupTickets = () => {\n    let groupedTickets = groupBy(tickets, grouping);\n\n    // Apply the priority labels if grouping by priority\n    if (grouping === \"priority\") {\n      groupedTickets = groupedTickets.map((group) => ({\n        ...group,\n        title: priorityLabels[group.title] || \"No priority\",\n      }));\n    }\n\n    // Sort tickets within each group\n    groupedTickets.forEach((group) => {\n      if (sorting === \"priority\") {\n        group.tickets.sort((a, b) => b.priority - a.priority);\n      } else {\n        group.tickets.sort((a, b) => a.title.localeCompare(b.title));\n      }\n    });\n\n    return groupedTickets;\n  };\n\n  return (\n    <div className=\"board-container\">\n      <div className=\"kanban-board\">\n        {groupTickets().map((group) => (\n          <Column key={group.title} title={group.title} tickets={group.tickets} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}